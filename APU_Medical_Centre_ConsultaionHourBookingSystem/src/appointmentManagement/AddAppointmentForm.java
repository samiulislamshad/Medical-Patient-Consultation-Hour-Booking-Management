/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package appointmentManagement;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * @author SUHA
 */
public class AddAppointmentForm extends javax.swing.JDialog {

    /**
     * Creates new form AddAppointmentForm
     */
    public String user = "";
    public AppointmentManagementPage jparent;
    public AddAppointmentForm(AppointmentManagementPage parent, boolean modal) {
        super(parent, modal);
        this.jparent = parent;
        initComponents();
    }
    
    
    private boolean checkDateFormat(String date) {
        Pattern datePattern = Pattern.compile(
      "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)$" 
      + "|^(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))$"
      + "|^(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))$" 
      + "|^(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))$");
        
        return datePattern.matcher(date).matches();
    }

    private boolean checkTimeFormat(String time) {
        Pattern timePattern = Pattern.compile("([0]?[0-9]|1[0-2]):[0-5][0-9] (AM|PM|am|pm)");
        
        return timePattern.matcher(time).matches();
    }
    
    private void writeFile(int index, String patient, String doctor, String date, String time){
        FileWriter fw = null;
        try {
            File rf = new File("AppointmentsData.txt");
            if(!rf.exists()){
                rf.createNewFile();
                System.out.println("'AppointmentsData.txt' file created.");
            }
            fw = new FileWriter(rf, true);
            fw.append(index+","+patient+","+doctor+","+date+","+time+"\n");
            JOptionPane.showMessageDialog(this, "New Appointment data has been added successfull!");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Problem occured in accessing authentication file.");
        }finally{
            try {
                fw.flush();
                fw.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Problem occured in accessing authentication file.");
            }
        }
    }
    
    private int getNewIndex(){
        BufferedReader br = null;
        int lineno = 0;
        try {
            File rf = new File("AppointmentsData.txt");
            if(!rf.exists()){
                rf.createNewFile();
                System.out.println("'AppointmentsData.txt' file created.");
            }
            br = new BufferedReader(new FileReader(rf));
            lineno = br.lines().toArray().length+1;
            br.close();
            return lineno;
        } catch (IOException ex) {
            try {
                br.close();
                return -1;
            } catch (IOException ex1) {
                JOptionPane.showMessageDialog(this, "Authentication Discarded. Technical Error");;
            }
            JOptionPane.showMessageDialog(this, "Authentication Discarded. Technical Error");
        }
        return 1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        signupLbl = new javax.swing.JLabel();
        patientLbl = new javax.swing.JLabel();
        docotorLbl = new javax.swing.JLabel();
        dateLbl = new javax.swing.JLabel();
        timeLbl = new javax.swing.JLabel();
        patientTf = new javax.swing.JTextField();
        docotorTf = new javax.swing.JTextField();
        dateTf = new javax.swing.JTextField();
        timeTf = new javax.swing.JTextField();
        dateFrmtLbl = new javax.swing.JLabel();
        timeFrmtLbl1 = new javax.swing.JLabel();
        submitBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 250, 80));

        signupLbl.setFont(new java.awt.Font("Comic Sans MS", 0, 25)); // NOI18N
        signupLbl.setForeground(new java.awt.Color(45, 38, 38));
        signupLbl.setText("Insert Appointments");

        patientLbl.setFont(new java.awt.Font("Roboto", 2, 20)); // NOI18N
        patientLbl.setForeground(new java.awt.Color(45, 38, 38));
        patientLbl.setText("Patient");
        patientLbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        docotorLbl.setFont(new java.awt.Font("Roboto", 2, 20)); // NOI18N
        docotorLbl.setForeground(new java.awt.Color(45, 38, 38));
        docotorLbl.setText("Doctor");
        docotorLbl.setFocusable(false);
        docotorLbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        dateLbl.setFont(new java.awt.Font("Roboto", 2, 20)); // NOI18N
        dateLbl.setForeground(new java.awt.Color(45, 38, 38));
        dateLbl.setText("Date");
        dateLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        timeLbl.setFont(new java.awt.Font("Roboto", 2, 20)); // NOI18N
        timeLbl.setForeground(new java.awt.Color(45, 38, 38));
        timeLbl.setText("Time");
        timeLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        patientTf.setFont(new java.awt.Font("Georgia", 0, 20)); // NOI18N
        patientTf.setForeground(new java.awt.Color(68, 68, 68));
        patientTf.setMargin(new java.awt.Insets(0, 15, 0, 10));

        docotorTf.setFont(new java.awt.Font("Georgia", 0, 20)); // NOI18N
        docotorTf.setForeground(new java.awt.Color(68, 68, 68));
        docotorTf.setMargin(new java.awt.Insets(0, 15, 0, 10));

        dateTf.setFont(new java.awt.Font("Georgia", 0, 20)); // NOI18N
        dateTf.setForeground(new java.awt.Color(68, 68, 68));
        dateTf.setMargin(new java.awt.Insets(0, 15, 0, 10));

        timeTf.setFont(new java.awt.Font("Georgia", 0, 20)); // NOI18N
        timeTf.setForeground(new java.awt.Color(68, 68, 68));
        timeTf.setMargin(new java.awt.Insets(0, 15, 0, 10));

        dateFrmtLbl.setFont(new java.awt.Font("Georgia", 2, 12)); // NOI18N
        dateFrmtLbl.setForeground(new java.awt.Color(79, 94, 122));
        dateFrmtLbl.setText("Format: YYYY-MM-DD");

        timeFrmtLbl1.setFont(new java.awt.Font("Georgia", 2, 12)); // NOI18N
        timeFrmtLbl1.setForeground(new java.awt.Color(79, 94, 122));
        timeFrmtLbl1.setText("Format: HH:MM AM or HH:MM PM");

        submitBtn.setFont(new java.awt.Font("Comic Sans MS", 0, 20)); // NOI18N
        submitBtn.setText("Submit");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(231, 231, 231)
                .addComponent(signupLbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(181, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(patientLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patientTf, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(docotorLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(docotorTf)
                                .addComponent(dateTf)
                                .addComponent(timeFrmtLbl1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(timeTf)
                                .addComponent(dateFrmtLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(161, 161, 161))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(signupLbl)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(patientTf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientLbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(docotorTf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(docotorLbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateTf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateLbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(dateFrmtLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeTf, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(timeFrmtLbl1)
                .addGap(18, 18, 18)
                .addComponent(submitBtn)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 390));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        // TODO add your handling code here:
        String patient = this.patientTf.getText();
        String doctor = this.docotorTf.getText();
        String date = this.dateTf.getText();
        String time = this.timeTf.getText();
        

        if (patient.contains(",") || doctor.contains(",") || date.contains(",") || time.contains(",")) {
            JOptionPane.showMessageDialog(this, "Comma is not allowed!");
        }
        else if("".equals(patient)){
            JOptionPane.showMessageDialog(this, "Patient Name can't be empty!");
        }
        else if("".equals(doctor)){
            JOptionPane.showMessageDialog(this, "Patient Name can't be empty!");
        }
        else if("".equals(date) || !checkDateFormat(date)){
            JOptionPane.showMessageDialog(this, "Invalid Date Format!");
        }
        else if("".equals(time) || !checkTimeFormat(time)){
            JOptionPane.showMessageDialog(this, "Invalid Time Format!");
        }
        else{
            //            Writing Data to a file
            int index = getNewIndex();
            if (index != -1) {
                writeFile(index, patient, doctor, date, time);
                this.jparent.showAppointments();
                this.dispose();
            }
        }
    }//GEN-LAST:event_submitBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddAppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddAppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddAppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddAppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddAppointmentForm dialog = new AddAppointmentForm(new AppointmentManagementPage(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dateFrmtLbl;
    private javax.swing.JLabel dateLbl;
    private javax.swing.JTextField dateTf;
    private javax.swing.JLabel docotorLbl;
    private javax.swing.JTextField docotorTf;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel patientLbl;
    private javax.swing.JTextField patientTf;
    private javax.swing.JLabel signupLbl;
    private javax.swing.JButton submitBtn;
    private javax.swing.JLabel timeFrmtLbl1;
    private javax.swing.JLabel timeLbl;
    private javax.swing.JTextField timeTf;
    // End of variables declaration//GEN-END:variables

}
