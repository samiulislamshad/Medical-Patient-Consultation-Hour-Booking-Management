/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package initialPages;

import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileOutputStream;
import com.itextpdf.text.Document;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author User
 */
public class PatientHandler extends javax.swing.JFrame {

    private List listOfPatient = new ArrayList();

    /**
     * Creates new form PatientHandler
     */
    public String user = "Doctor1";

    public PatientHandler() {
        initComponents();
        user = new LoginPage().doctor;
        generatePatientList();
        LoadTable();

    }

    private void generatePatientList() {
        BufferedReader br = null;
        try {
            File rf = new File("AppointmentsData.txt");
            if (!rf.exists()) {
                rf.createNewFile();
            }
            br = new BufferedReader(new FileReader(rf));

            Object[] lines = br.lines().toArray();
            for (int i = 0; i < lines.length; i++) {
                if (lines[i].toString().contains(user)) {
                    listOfPatient.add(lines[i]);
//                    System.out.println(lines[i]);

                }
            }
            
            
        } catch (IOException ex) {
            try {
                br.close();
                return;
            } catch (IOException ex1) {
                JOptionPane.showMessageDialog(this, "Something went wrong!");
            }
        }
        try {
            br.close();
        } catch (IOException ex) {
            Logger.getLogger(PatientHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PatientListTable = new javax.swing.JTable();
        RecordEditBtn = new javax.swing.JLabel();
        bckbtn = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(200, 200));
        setPreferredSize(new java.awt.Dimension(700, 400));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setText("List of Patients:");

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        PatientListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Date", "Time"
            }
        ));
        PatientListTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(PatientListTable);

        RecordEditBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        RecordEditBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RecordEditBtn.setText("Edit record");
        RecordEditBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        RecordEditBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RecordEditBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RecordEditBtnMouseClicked(evt);
            }
        });

        bckbtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bckbtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bckbtn.setText("Back");
        bckbtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bckbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bckbtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bckbtnMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 982, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(433, 433, 433)
                                .addComponent(RecordEditBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(16, 16, 16))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bckbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bckbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(RecordEditBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RecordEditBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RecordEditBtnMouseClicked
        
        int position = PatientListTable.getSelectedRow();
        String patient = (String) PatientListTable.getValueAt(position, 0);
        String date = (String) PatientListTable.getValueAt(position, 1);
        String time = (String) PatientListTable.getValueAt(position, 2);
        
        DateTimeCostMgtForm form = new DateTimeCostMgtForm(user, patient, date, time);
        form.setVisible(true);
        this.dispose();
        /*
        //change text file
        BufferedReader br = null;
        FileWriter fw = null;
        try {
            File rf = new File("AppointmentsData.txt");
            if (!rf.exists()) {
                System.out.println("Error");
            }
            br = new BufferedReader(new FileReader(rf));
            Object[] lines = br.lines().toArray();
            for (int i = 0; i < lines.length; i++) {
                String line = lines[i].toString().trim();
                String[] row = line.split(",");

                if (!(user.equals(row[2]) && patient.equals(row[1]))) {
                    //write to new file
                    File file = new File("temp file.txt");
                    if (!file.exists()) {
                        file.createNewFile();
                        System.out.println("'temp file.txt' file createdLLLLL.");
                    }

                    fw = new FileWriter(file, true);
                    fw.write(row[0] + "," + row[1] + "," + row[2] + "," + row[3] + "," + row[4] + "\n");
                    fw.flush();
                    fw.close();
                } else {
                    //change and write to new file
                    File file = new File("temp file.txt");
                    if (!file.exists()) {
                        file.createNewFile();
                        System.out.println("'temp file.txt' file created.");
                    }
                    fw = new FileWriter(file, true);
                    fw.write(row[0] + "," + row[1] + "," + row[2] + "," + date + "," + time + "\n");
                    fw.flush();
                    fw.close();
                }
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Technical Error, call programmer");
        } finally {
            try {
                br.close();

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Authentication Discarded. Technical Error, call programmer");;
            }
        }
        
        //rename new file and delete old file
        File f1 = new File("AppointmentsData.txt");
        File f2 = new File("temp file.txt");
        
        boolean b = f1.delete();
        Boolean x = f2.renameTo(f1);
        System.out.println(b);
        System.out.println(x);
        */
        //chng array
        //now change table
        

    }//GEN-LAST:event_RecordEditBtnMouseClicked

    private void bckbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bckbtnMouseClicked
        DoctorPage dp = new DoctorPage();
        dp.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_bckbtnMouseClicked

    private void bckbtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bckbtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bckbtnMouseEntered

    public void createPdf(String pname,String date,String time,String cost) {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream("patientInvoice.pdf"));
            document.open();
            document.add(new Paragraph("Patient name: "+pname+"\n"+"Cost: "+cost+"\n"+"Date: "+date+"\n"+"Time"+time+"\n"));
            document.close();
            System.out.println("the program has been executed");
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientHandler().setVisible(true);
            }

        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PatientListTable;
    private javax.swing.JLabel RecordEditBtn;
    private javax.swing.JLabel bckbtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return true;
    }

    private void LoadTable() {

        for (int i = 0; i < listOfPatient.size(); i++) {
            String line = listOfPatient.get(i).toString().trim();
            String[] lines = line.split(",");

            String pName = lines[1];
            String date = lines[3];
            String time = lines[4];

            DefaultTableModel model = (DefaultTableModel) PatientListTable.getModel();
            model.addRow(new Object[]{pName, date, time});

        }
    }
}
